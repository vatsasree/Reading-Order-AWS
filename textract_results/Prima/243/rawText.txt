
viewpoints
ing natural forces and a dizzying array
grammer can work within a model that
of non-technical economic, statutory,
We need to encourage
makes the job of implementation less
societal, and logical constraints. Soft-
error-prone.
ware engineering is similar except
system thinking that
The project manager is responsible
that fewer forces involve the natural
embraces hardware
for coordinating all the parts of the
world.
team, meeting the schedules, getting
Adapting to changing environments.
and user environment
the resources, and staying within bud-
Most environments that use comput-
as well as software.
gets. The project manager interfaces
ing constantly change and expand.
with the stakeholders, architects, engi-
With drawn-out acquisition processes
neers, and programmers to ensure the
for complex software systems, it is not
project produces value for the stake-
unusual for the system to be obsolete
holders.
by the time of delivery. What waste!
In some cases, as noted previously,
Mastering evolutionary development is
a systems engineer will also be needed
the new challenge.2
a system engineer to the team will be
on the team.
very important.
The System
Conclusion
The problems surrounding the six is-
Engineering Team
We have not arrived at that point in
sues listed here are in large measure
No matter what process engineers use
software engineering practice where
the consequence of an overly narrow
to achieve their system objectives, they
we can satisfy all the engineering cri-
view of the system for which the soft-
must form and manage an engineering
teria described in this column. We still
ware engineer is responsible. Although
team. Much has been written on this
need more effective tools, better soft-
controlled by software, the system is
topic. Software engineering curricula
ware engineering education, and wider
usually a complex combination of soft-
are getting better at teaching students
adoption of the most effective practic-
ware, hardware, and environment.
how to form and work on effective
es. Even more, we need to encourage
Platform independence is an ideal
teams, but many have a long way to go.
system thinking that embraces hard-
of many software systems. It means
Every software team has four im-
ware and user environment as well as
that the software should work under
portant roles to fill. These roles can be
software.
a choice of operating systems and
spread out among several people.
By understanding the fundamen-
computing hardware. To achieve this,
The software architect gathers the
tal ideas that link all engineering dis-
all the platform-dependent functions
requirements and turns them into
ciplines, we can recognize how those
are gathered into a platform inter-
specifications, seeks an understanding
ideas can contribute to better software
face module; then, porting the sys-
of the entire system and its trade-offs,
production. This will help us construct
tem to another platform entails only
and develops an architecture plan for
the engineering reference discipline
the building of that module for the
the system and its user interfaces.
that Glass tells us is missing from our
new platform. Examples of this are
The software engineer creates a
profession. Let us put this controversy
the Basic Input-Output System (BIOS)
system that best meets the architec-
to rest.
component of operating systems and
ture plan. The engineer identifies and
the Java Virtual Machine (JVM). When
addresses conflicts and constraints
References
1. Denning, P. Computing is a natural science. Commun.
this can be achieved, the software en-
missed by the architect, and designs
ACM 50,7 (July 2007), 13-18.
gineer is justified in a software-centric
controls and feedbacks to address
2. Denning, P., Gunderson, C., and Hayes-Roth, R.
Evolutionary system development. Commun. ACM 51,
view of the system.
them. The engineer also designs and
12 (Dec. 2008), 29-31.
But not all software systems are
oversees tests. The engineer must have
3. Denning, P. et al. Computing as a discipline. Commun.
ACM 32, (Jan. 1989), 9-23.
platform independent. A prominent
the experience and knowledge to de-
4. Glass, R., Vessey, I., and Ramesh, V. Research in
example is the control system for ad-
sign an economical and effective solu-
software engineering: An analysis of the literature.
Information and Software Technology 44, 8 (2002),
vanced aircraft. The control system is
tion with a predictable outcome.
491-506.
implemented as a distributed system
5. Riehle, R. An Engineering Context for Software
The programmer converts the engi-
Engineering. Ph.D. thesis, 2008; theses.nps.navy.
across many processors throughout
neering designs into working, tested
mil/08Sep_Riehle_PhD.pdt
6.
Riehle, R. Engineering on the surprise continuum: As
the structure where they can be close
code. Programmers are problem-solv-
applied to software practice. ACM SIGSOFT Software
to sensors and control surfaces. An-
ers in their own right because they
Engineering News 30, (Sept 2005), 1-6.
7. Sangwan, R., Lin, L-P, and Neill, C. Structural
other example is software in any large
must develop efficient, dependable
complexity in architecture-centric software. IEEE
system that must constantly adapt in
programs for the design. Moreover,
Computer (Mar. 2008), 96-99.
8. Tichy, W. Should computer scientists experiment
a rapidly changing environment. In
anyone who has been a programmer
more? IEEE Computer (May 1998), 32-40.
these cases the characteristics of the
knows how easy it is to make mistakes
hardware, the interconnections, and
and how much time and effort are
Peter J. Denning (pjd@nps.edu) is the director of the
Cebrowski Institute for Information Innovation and
the environment continually influence
needed to detect and remove mistakes
Superiority at the Naval Postgraduate School in Monterey,
the software design. The software en-
from code. When the software engi-
CA, and is a past president of ACM.
gineer must either know the system
neer has provided a good specification,
Richard Riehle (rdriehle@nps.edu) is a visiting professor
well, or must interact well with some-
with known exceptions predefined and
at Naval Postgraduate School in Monterey, CA, and is
author of numerous articles on software engineering and
one who does. In such cases adding
controls clearly delineated, the pro-
the popular textbook Ada Distilled.
26 COMMUNICATIONS OF THE ACM
MARCH 2009
VOL. 52
NO. 3